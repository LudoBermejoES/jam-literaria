name: Deploy Jam Literaria

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: |
            app/package-lock.json
            server/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd app
          npm ci

      - name: Build frontend
        run: |
          cd app
          npm run build:production

      - name: Install server dependencies
        run: |
          cd server
          npm ci --production

      - name: Create deployment archives
        run: |
          # Create frontend archive
          cd app/dist
          tar -czf ../../jam-client.tar.gz .
          cd ../..
          
          # Create server archive (exclude node_modules, .env, and dev files)
          tar -czf jam-server.tar.gz \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='coverage' \
            --exclude='.nyc_output' \
            server/

      - name: Upload frontend archive
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "jam-client.tar.gz"
          target: "/tmp/"

      - name: Upload server archive
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "jam-server.tar.gz"
          target: "/tmp/"

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            
            # Clean previous deployments
            rm -rf /var/www/jam-client/*
            rm -rf /var/www/jam-server/*
            
            # Extract frontend
            cd /var/www/jam-client
            tar -xzf /tmp/jam-client.tar.gz
            rm /tmp/jam-client.tar.gz
            
            # Extract server
            cd /var/www/jam-server
            tar -xzf /tmp/jam-server.tar.gz --strip-components=1
            rm /tmp/jam-server.tar.gz
            
            # Install server production dependencies
            cd /var/www/jam-server
            npm ci --production
            
            # Create environment file
            cat > .env << EOF
            NODE_ENV=production
            PORT=5000
            SESSION_SECRET=${{ secrets.SESSION_SECRET }}
            DATABASE_PATH=../database/jam_literaria.db
            EOF
            
            # Initialize database if it doesn't exist
            if [ ! -f /var/www/database/jam_literaria.db ]; then
              echo "Initializing database..."
              cd /var/www/jam-server
              cp database/schema.sql /var/www/database/
              sqlite3 /var/www/database/jam_literaria.db < database/schema.sql
              echo "Database initialized successfully"
            fi
            
            # Install PM2 globally if not present
            if ! command -v pm2 &> /dev/null; then
              sudo npm install -g pm2
            fi
            
            # Stop existing PM2 processes
            pm2 stop jam-literaria || true
            pm2 delete jam-literaria || true
            
            # Start the application with PM2
            cd /var/www/jam-server
            pm2 start app.js --name "jam-literaria" --watch
            pm2 save
            
            # Setup nginx config if nginx is available
            if command -v nginx &> /dev/null; then
              sudo tee /etc/nginx/sites-available/jam-literaria > /dev/null << 'NGINXEOF'
            server {
                listen 80;
                server_name _;
                
                # Frontend
                location / {
                    root /var/www/jam-client;
                    try_files $uri $uri/ /index.html;
                    
                    # Cache static assets
                    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                        expires 1y;
                        add_header Cache-Control "public, immutable";
                    }
                }
                
                # Backend API
                location /api/ {
                    proxy_pass http://localhost:5000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                }
                
                # Socket.IO
                location /socket.io/ {
                    proxy_pass http://localhost:5000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            NGINXEOF
              
              # Enable site (remove default if it exists)
              sudo rm -f /etc/nginx/sites-enabled/default
              sudo ln -sf /etc/nginx/sites-available/jam-literaria /etc/nginx/sites-enabled/
              
              # Test and reload nginx
              sudo nginx -t && sudo systemctl reload nginx
            fi
            
            echo "Deployment completed successfully!"
            echo "Frontend deployed to: /var/www/jam-client"
            echo "Backend deployed to: /var/www/jam-server"
            echo "PM2 status:"
            pm2 status 