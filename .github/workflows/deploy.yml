name: Deploy Jam Literaria

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: |
            app/package-lock.json
            server/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd app
          npm ci

      - name: Build frontend
        run: |
          cd app
          npm run build:production

      - name: Install server dependencies
        run: |
          cd server
          npm ci --production

      - name: Create deployment archives
        run: |
          # Create frontend archive
          cd app/dist
          tar -czf ../../jam-client.tar.gz .
          cd ../..
          
          # Create server archive (exclude node_modules, .env, and dev files)
          tar -czf jam-server.tar.gz \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='coverage' \
            --exclude='.nyc_output' \
            server/

      - name: Upload frontend archive
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "jam-client.tar.gz"
          target: "/tmp/"

      - name: Upload server archive
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "jam-server.tar.gz"
          target: "/tmp/"

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            
            # Clean previous deployments
            rm -rf /var/www/jam-client/*
            rm -rf /var/www/jam-server/*
            
            # Extract frontend
            cd /var/www/jam-client
            tar -xzf /tmp/jam-client.tar.gz
            rm /tmp/jam-client.tar.gz
            
            # Extract server
            cd /var/www/jam-server
            tar -xzf /tmp/jam-server.tar.gz --strip-components=1
            rm /tmp/jam-server.tar.gz
            
            # Install server production dependencies
            cd /var/www/jam-server
            /home/foundryvtt/.nvm/versions/node/v24.1.0/bin/npm ci --production
            
            # Create environment file
            cat > .env << EOF
            NODE_ENV=production
            PORT=5000
            SESSION_SECRET=${{ secrets.SESSION_SECRET }}
            DATABASE_PATH=../database/jam_literaria.db
            EOF
            
            # Initialize database if it doesn't exist
            if [ ! -f /var/www/database/jam_literaria.db ]; then
              echo "Initializing database..."
              cd /var/www/jam-server
              cp database/schema.sql /var/www/database/
              sqlite3 /var/www/database/jam_literaria.db < database/schema.sql
              echo "Database initialized successfully"
            fi
            

            echo "Deployment completed successfully!"
            echo "Frontend deployed to: /var/www/jam-client"
            echo "Backend deployed to: /var/www/jam-server"
            echo "PM2 status:"
            pm2 status 